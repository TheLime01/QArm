ip_address = 'localhost' # Enter your IP Address here
project_identifier = 'P2B' # Enter the project identifier i.e. P2A or P2B
#--------------------------------------------------------------------------------
import sys
sys.path.append('../')
from Common.simulation_project_library import *

hardware = False
QLabs = configure_environment(project_identifier, ip_address, hardware).QLabs
arm = qarm(project_identifier,ip_address,QLabs,hardware)
potentiometer = potentiometer_interface()
#--------------------------------------------------------------------------------
# STUDENT CODE BEGINS
#---------------------------------------------------------------------------------

def main():

    rotate_qarm(colour)
    drop_off()

    ## Checks if the Q-Arm is at the correct container
    ## XYZ coords of container found by trial and error
    def is_at_container(colour):
        if colour == "red":
            container_coords = [0.118, -0.389]
        elif colour == "blue":
            container_coords = [0.021, 0.406]
        elif colour == "green":
            container_coords = [-0.338, 0.226]

        position = arm.effector_position()
        position_x = position[0]
        position_y = position[1]

        if (position_x == container_coords[0]) and (position_y == container_coords[1]):
            return True
        else:
            return False
        
    def rotate_qarm(colour):
        terminate = is_at_container(colour)
        old_reading = potentiometer.right()
        
        while not terminate:
            new_reading = potentiometer.right()
            delta = new_reading - old_reading
            increment = 348*delta
            arm.rotate_base(increment)
            time.sleep(0.2)
            old_reading = new_reading
            terminate = is_at_container(colour)

    def drop_off():
        dropoff_position = potentiometer.left()
        arm.activate_autoclaves()

        if dropoff_position == 1:#Position 1, placement of a small container on top
            move_QArm(-35,50)
        
        else:#Position 2, Placement of a large container inside 
            arm.open_autoclave(container_location[2], True)
            move_QArm(20,25)
            time.sleep(2)
            arm.open_autoclave(container_location[2], False)

        arm.deactivate_autoclaves()
        arm.home()

    def move_QArm(a, b):
        arm.rotate_elbow(a)
        arm.rotate_shoulder(b)
        time.sleep(2)
        arm.control_gripper(45)

#---------------------------------------------------------------------------------
# STUDENT CODE ENDS
#---------------------------------------------------------------------------------
