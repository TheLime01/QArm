ip_address = 'localhost' # Enter your IP Address here
project_identifier = 'P2B' # Enter the project identifier i.e. P2A or P2B
#--------------------------------------------------------------------------------
import sys
sys.path.append('../')
from Common.simulation_project_library import *

hardware = False
QLabs = configure_environment(project_identifier, ip_address, hardware).QLabs
arm = qarm(project_identifier,ip_address,QLabs,hardware)
potentiometer = potentiometer_interface()
#--------------------------------------------------------------------------------
# STUDENT CODE BEGINS
#---------------------------------------------------------------------------------

def main():
    num = 2
    if num == 1 or num == 4:
        box = 'red'
    elif num == 2 or num == 5:
        box = 'green'
    else:
        box = 'blue'
        
    arm.spawn_cage(num)
    time.sleep(2)
    pick_up()
    time.sleep(2)
    rotate_qarm(box)
    time.sleep(10)
    drop_off(box)
    

def pick_up():
    arm.move_arm(0.554, 0.049, -0.056)
    time.sleep(2)
    arm.control_gripper(45)
    time.sleep(2)
    arm.move_arm(0.406, 0.0, 0.483)
    print("MOBVE ARM NOW!!!")
    
def is_at_container(colour):
    if colour == "red":
        container_coords = [0.046, -0.403] #26%
    elif colour == "blue":
        container_coords = [0.021, 0.406]
    elif colour == "green":
        container_coords = [-0.373, 0.161] #95

    position = arm.effector_position()
    position_x = position[0]
    position_y = position[1]

    if (position_x == container_coords[0]) and (position_y == container_coords[1]):
        return True
    else:
        return False

def rotate_qarm(colour):
    terminate = is_at_container(colour)
    old_reading = potentiometer.right()

    while not terminate:
        print(arm.effector_position())
        new_reading = potentiometer.right()
        delta = new_reading - old_reading
        increment = 348*delta
        arm.rotate_base(increment)
        time.sleep(0.2)
        old_reading = new_reading
        terminate = is_at_container(colour)

def drop_off(container):
    print("TO LATE!!")
    dropoff_position = potentiometer.left()
    arm.activate_autoclaves()

    if dropoff_position == 1:#Position 1, placement of a small container on top
        move_QArm(-35,50)
    
    elif dropoff_position >= 0.5:#Position 2, Placement of a large container inside 
        arm.open_autoclave(container, True)
        time.sleep(2)
        move_QArm(20,25)
        time.sleep(2)
        arm.open_autoclave(container, False)

    arm.deactivate_autoclaves()
    arm.home()

def move_QArm(a, b):
    arm.rotate_elbow(a)
    time.sleep(2)
    arm.rotate_shoulder(b)
    time.sleep(2)
    arm.control_gripper(-45)
    time.sleep(2)


#---------------------------------------------------------------------------------
# STUDENT CODE ENDS
#---------------------------------------------------------------------------------
